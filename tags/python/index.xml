<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Carson&#39;s Tech Note</title>
    <link>https://carsonwah.github.io/tags/python/</link>
    <description>Recent content in Python on Carson&#39;s Tech Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hk</language>
    <lastBuildDate>Mon, 12 Mar 2018 23:27:47 +0800</lastBuildDate>
    
	<atom:link href="https://carsonwah.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解Python的 relative 和 absolute import</title>
      <link>https://carsonwah.github.io/post/languages/python/2018-03-12-importing-modules/</link>
      <pubDate>Mon, 12 Mar 2018 23:27:47 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/languages/python/2018-03-12-importing-modules/</guid>
      <description>&lt;p&gt;在開發python project時，通常都會以package分開各部件，貫徹&amp;rdquo;Separation of concerns&amp;rdquo;。可是如果對python modules的概念不清晰，各部件之間的import可以成為project的大問題。&lt;/p&gt;

&lt;p&gt;以下會以case study的形式解釋python import的常見問題：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Django裡處理One-To-Many Relation</title>
      <link>https://carsonwah.github.io/post/frameworks/django/2018-02-27-one-to-many-relation/</link>
      <pubDate>Tue, 27 Feb 2018 17:31:58 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/frameworks/django/2018-02-27-one-to-many-relation/</guid>
      <description>&lt;p&gt;建立Relational Database的時候常常會用到One-To-Many Relation，一般都是以Foreign Key的形式儲存。&lt;/p&gt;

&lt;p&gt;Django功能十分齊全，但它的model inheritance設計令所有功能都非常&amp;rdquo;implicit&amp;rdquo;，一些功能如果不知道要到哪裡define的話根本無從入手。
所以這篇就來紀錄一下如何用Django的ORM處理One-To-Many的Model吧&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>建置python虛擬環境(Virtual Environment)</title>
      <link>https://carsonwah.github.io/post/languages/python/2018-01-05-set-up-virtual-environment/</link>
      <pubDate>Fri, 05 Jan 2018 00:25:05 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/languages/python/2018-01-05-set-up-virtual-environment/</guid>
      <description>&lt;p&gt;多人共同協作一個project的時候非常需要各人的開發環境統一，才不會發生「我run不了你的code」這些情況。&lt;/p&gt;

&lt;p&gt;「python的pip」不像「node js的npm」那樣有&lt;code&gt;node_modules&lt;/code&gt;、&lt;code&gt;package.json&lt;/code&gt;這些規範，所以統一開發環境需要比較low level地做，一般都是使用&lt;code&gt;virtualenv&lt;/code&gt;這個pip package。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Jupyter同時使用Python2 &#43; Python3</title>
      <link>https://carsonwah.github.io/post/languages/python/2017-10-22-set-up-jupyter-python3/</link>
      <pubDate>Sat, 21 Oct 2017 02:03:29 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/languages/python/2017-10-22-set-up-jupyter-python3/</guid>
      <description>&lt;p&gt;&lt;em&gt;(Updated on 2018-01-20)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://jupyter.org/&#34;&gt;Jupyter Notebook&lt;/a&gt; (前身ipython notebook)是個很好用的coding工具，它可以：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用作快速prototyping：分段execute、即時修改memory中的variables&lt;/li&gt;
&lt;li&gt;用作寫報告：內容可以包括code、執行結果、圖表等等&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下會如何解釋分別以&lt;code&gt;pip&lt;/code&gt;和&lt;code&gt;conda&lt;/code&gt;處理 Jupyter 的 python environment。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>