<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Carson&#39;s Tech Note</title>
    <link>https://carsonwah.github.io/</link>
    <description>Recent content on Carson&#39;s Tech Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hk</language>
    <lastBuildDate>Tue, 16 Jan 2018 18:39:11 +0800</lastBuildDate>
    
	<atom:link href="https://carsonwah.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>建置eslint開發環境</title>
      <link>https://carsonwah.github.io/post/frameworks/nodejs/2018-01-16-set-up-eslint/</link>
      <pubDate>Tue, 16 Jan 2018 18:39:11 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/frameworks/nodejs/2018-01-16-set-up-eslint/</guid>
      <description>&lt;h1 id=&#34;1-前言&#34;&gt;1. 前言&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;對於所有Project來說，&amp;rdquo;Coding Style&amp;rdquo;都很重要，尤其是多人協作時，應該大家一起follow某些共同的coding style，才方便互相查看及修改其他人的code。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這時候我們可以使用&lt;code&gt;eslint&lt;/code&gt;，來規範整個project的code，雖不能統一各人的個人風格，但它可以確保所有code都consistently follow某些syntax，不會亂糟糟。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解決nodejs的relative import地獄</title>
      <link>https://carsonwah.github.io/post/frameworks/nodejs/2018-01-08-set-up-absolute-import/</link>
      <pubDate>Mon, 08 Jan 2018 18:11:22 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/frameworks/nodejs/2018-01-08-set-up-absolute-import/</guid>
      <description>&lt;p&gt;nodejs和npm是很模組化(modular)的framework，經常需要import其他package和檔案，但隨著專案規模越來越大，一不小心就會進入relative import的地獄：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Something } from &#39;../../../../../../../../../HelloWorld&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下是這個情況的解決良方。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>入門理解WSGI</title>
      <link>https://carsonwah.github.io/post/web/backend/2018-01-05-wsgi/</link>
      <pubDate>Fri, 05 Jan 2018 02:56:19 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/web/backend/2018-01-05-wsgi/</guid>
      <description>&lt;h1 id=&#34;簡介&#34;&gt;簡介&lt;/h1&gt;

&lt;p&gt;WSGI全名是&amp;rdquo;Web Server Gateway Interface&amp;rdquo;，就是一個規範python server的interface。&lt;/p&gt;

&lt;p&gt;傳統Web server如Apache+php會直接在runtime處理請求並return response，但python server通常只能長run一個python process，這樣會造成server脆弱，容易crash等等壞處。&lt;/p&gt;

&lt;p&gt;但要配上Apache/nginx這些server，它們不會知道你的application怎樣運作，必須有個統一規範：WSGI。&lt;/p&gt;

&lt;p&gt;簡單來說在WSGI架構底下，你的python server(WSGI Application)不會直接接收requests，而是會有多一層server(WSGI server)。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>建置python虛擬環境(Virtual Environment)</title>
      <link>https://carsonwah.github.io/post/languages/python/2018-01-05-set-up-virtual-environment/</link>
      <pubDate>Fri, 05 Jan 2018 00:25:05 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/languages/python/2018-01-05-set-up-virtual-environment/</guid>
      <description>&lt;p&gt;多人共同協作一個project的時候非常需要各人的開發環境統一，才不會發生「我run不了你的code」這些情況。&lt;/p&gt;

&lt;p&gt;「python的pip」不像「node js的npm」那樣有&lt;code&gt;node_modules&lt;/code&gt;、&lt;code&gt;package.json&lt;/code&gt;這些規範，所以統一開發環境需要比較low level地做，一般都是使用&lt;code&gt;virtualenv&lt;/code&gt;這個pip package。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>將本地Project放到Github</title>
      <link>https://carsonwah.github.io/post/developer_tools/git/2017-12-19-add-project-to-github/</link>
      <pubDate>Tue, 19 Dec 2017 16:12:25 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/developer_tools/git/2017-12-19-add-project-to-github/</guid>
      <description>&lt;h1 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git init
$ git add .
$ git commit -m &amp;quot;First commit&amp;quot;
$ git remote add origin https://github.com/NAME/REPO.git
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo的專案結構</title>
      <link>https://carsonwah.github.io/post/blogging/hugo/2017-12-18-hugo-file-structure/</link>
      <pubDate>Mon, 18 Dec 2017 21:49:08 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/blogging/hugo/2017-12-18-hugo-file-structure/</guid>
      <description>&lt;p&gt;完成Hugo的基本&lt;a href=&#34;https://carsonwah.github.io/post/blogging/hugo/2017-11-13-set-up-hugo/&#34;&gt;setup&lt;/a&gt;後，我們來看看Hugo的project structure吧。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(強烈建議花點時間理解Hugo的整個結構，不然遇上問題會很迷茫)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git pull或push不用再打密碼</title>
      <link>https://carsonwah.github.io/post/developer_tools/git/2017-11-16-set-up-passwordless-git/</link>
      <pubDate>Thu, 16 Nov 2017 17:07:24 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/developer_tools/git/2017-11-16-set-up-passwordless-git/</guid>
      <description>&lt;p&gt;快速設置Git，以後&lt;code&gt;git pull&lt;/code&gt; &lt;code&gt;git push&lt;/code&gt;都不用再打帳號密碼了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://carsonwah.github.io/about/</link>
      <pubDate>Mon, 13 Nov 2017 15:05:52 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/about/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>透過Hugo快速建置個人Blog</title>
      <link>https://carsonwah.github.io/post/blogging/hugo/2017-11-13-set-up-hugo/</link>
      <pubDate>Mon, 13 Nov 2017 15:05:52 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/blogging/hugo/2017-11-13-set-up-hugo/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Jupyter同時使用Python2 &#43; Python3</title>
      <link>https://carsonwah.github.io/post/languages/python/2017-10-22-set-up-jupyter-python3/</link>
      <pubDate>Sat, 21 Oct 2017 02:03:29 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/languages/python/2017-10-22-set-up-jupyter-python3/</guid>
      <description>&lt;p&gt;&lt;em&gt;(Updated on 2017-01-20)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://jupyter.org/&#34;&gt;Jupyter Notebook&lt;/a&gt; (前身ipython notebook)是個很好用的coding工具，它可以：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用作快速prototyping：分段execute、即時修改memory中的variables&lt;/li&gt;
&lt;li&gt;用作寫報告：內容可以包括code、執行結果、圖表等等&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;但Jupyter Notebook有自己的environment，如果要使用不同的environment，則需要小心處理。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>選擇個人Blogging工具</title>
      <link>https://carsonwah.github.io/post/blogging/hugo/2017-10-21-choosing-tools/</link>
      <pubDate>Sat, 21 Oct 2017 02:03:29 +0800</pubDate>
      
      <guid>https://carsonwah.github.io/post/blogging/hugo/2017-10-21-choosing-tools/</guid>
      <description>&lt;p&gt;作為一隻IT狗（程序猿），經常都要研究一堆新技術、新框架，很多時候花一整天折騰了出來，過一陣子就全忘了。所以我決定開個blog來記錄我踩過的坑，也希望幫助其他人不用步我的後塵。&lt;/p&gt;

&lt;p&gt;第一篇就先記錄一下我建置前的Research吧。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://carsonwah.github.io/google40804992d2bfad31/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://carsonwah.github.io/google40804992d2bfad31/</guid>
      <description>google-site-verification: google40804992d2bfad31.</description>
    </item>
    
  </channel>
</rss>